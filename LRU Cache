#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// design the class in the most optimal way

class LRUCache
{
    private:
       int capacity;
    public:
    //Constructor for initializing the cache capacity with the given value.
    class node{
        public:
        int key;
        int value;
        node *next;
        node *prev;
        node(int nkey,int nvalue)
        {
            key =nkey;
            value=nvalue;
        }
    };
    node *head=new node(-1,-1);
    node *tail=new node(-1,-1);
    LRUCache(int cap)
    {
        head->next=tail;
        tail->prev=head;
       capacity=cap; // code here
    }
    unordered_map<int,node*>mp;
    void add(node *newnode)
    {
        node *temp=head->next;
        head->next=newnode;
        newnode->next=temp;
        newnode->prev=head;
        temp->prev=newnode;
    }
    void deletenode(node *delnode)
    {
        node *temp=delnode->next;
        node *temp2=delnode->prev;
        temp->prev=temp2;
        temp2->next=temp;
    }
    
    //Function to return value corresponding to the key.
    int get(int key)
    {
        if(mp.find(key)!=mp.end())
        {
            node *temp=mp[key];
            int ans=temp->value;
            mp.erase(key);
            deletenode(temp);
            add(temp);
            mp[key]=head->next;
            return ans;
        }
         return -1;
        
    }
    
    //Function for storing key-value pair.
    void set(int key, int value)
    {
    //   node *newnode=new node(key,value);
    if(mp.find(key)!=mp.end())
    {
        node *temp=mp[key];
        mp.erase(key);
        deletenode(temp);
    }
    if(mp.size()==capacity)
    {
        //node *temp=mp[tail->prev->key];
        mp.erase(tail->prev->key);
        deletenode(tail->prev);
        
    }
    add(new node(key,value));
    mp[key]=head->next;
       
    }
};

// { Driver Code Starts.

int main()
{
    int t;
    cin >> t;
    while (t--)
    {

        int capacity;
        cin >> capacity;
        LRUCache *cache = new LRUCache(capacity);
        
        int queries;
        cin >> queries;
        while (queries--)
        {
            string q;
            cin >> q;
            if (q == "SET")
            {
                int key;
                cin >> key;
                int value;
                cin >> value;
                cache->set(key, value);
            }
            else
            {
                int key;
                cin >> key;
                cout << cache->get(key) << " ";
            }
        }
        cout << endl;
    }
    return 0;
}
  // } Driver Code Ends
